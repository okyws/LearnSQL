1. Untuk setiap pesanan, hitung subtotal untuk setiap pesanan (diidentifikasi oleh OrderID)
Jawaban: 
SELECT order_id, CAST(SUM((quantity * unit_price)-(quantity * unit_price * discount))
			AS DECIMAL(10,2)) AS subtotal 
FROM order_details
GROUP BY order_id
ORDER BY order_id;

2. Kita mencari penjualan berdasarkan tahun dari 1996-12-24 hingga 1997-09-30.
Jawaban:
SELECT O.shipped_date, O.order_id, CAST(SUM((D.quantity * D.unit_price)-(D.quantity * D.unit_price * D.discount))
			AS DECIMAL(10,2)) AS subtotal, EXTRACT(YEAR FROM O.shipped_date) AS YEAR
FROM order_details D
INNER JOIN orders O ON D.order_id = O.order_id
WHERE O.shipped_date >= '1996-12-24' AND O.shipped_date <= '1997-09-30'
GROUP BY O.order_id
ORDER BY O.shipped_date;

3. Kita hanya diminta untuk menampilkan list informasi product berurut berdasarkan alphabet.
Jawaban:
SELECT product_id, product_name, supplier_id, category_id, quantity_per_unit, unit_price
FROM products
ORDER BY product_name;

4. Kita menampilkan data product_id dan product_name dari tabel product dan urutkan berdasarkan nama produknya.
Jawaban: 
SELECT product_id, pro
FROM products         
ORDER BY product_name;

5. Kita diminta untuk membuat query untuk menghitung harga jual untuk setiap pesanan setelah diskon diterapkan.
Jawaban:
SELECT d.order_id, p.product_name, d.unit_price, d.quantity, d.discount,
	CAST(SUM((d.quantity * d.unit_price)-(d.quantity * d.unit_price * d.discount))
		AS DECIMAL(10,2)) AS ExtendedPrice
FROM order_details d
INNER JOIN products p ON d.product_id = p.product_id
GROUP BY d.order_id, p.product_name, d.unit_price, d.quantity, d.discount
ORDER BY d.order_id;

6. Kita diminta menampilkan list total product terjual dan productsales digabungkan berdasarkan category dari product tersebut dan di urutkan berdasarkan category dan nama product.
Jawaban:
SELECT c.category_id, c.category_name, p.product_name,
	CAST(SUM((d.quantity * d.unit_price)-(d.quantity * d.unit_price * d.discount)) AS DECIMAL(10,2))
	AS ProductSales
FROM categories c
INNER JOIN products p ON c.category_id = p.category_id
INNER JOIN order_details d ON p.product_id = d.product_id
INNER JOIN orders o ON o.order_id = d.order_id
WHERE EXTRACT(year FROM o.order_date) = '1997'
GROUP BY c.category_id, c.category_name, p.product_name
ORDER BY c.category_name, p.product_name; 

7. Kita diminta menampilkan list 10 product termahal berdasarkan unit pricenya.
Jawaban:
SELECT product_name AS "Ten_Most_Expensive_Product", unit_price AS "UnitPrice"
FROM products
ORDER BY unit_price DESC 
LIMIT 10;

8. Kita diminta menampilkan informasi semua product berdasarkan category dari product-product tersebut. dimana ada ketentuan informasi discontinued yang ditambahkan.
Jawaban:
SELECT c.category_name, p.product_name, p.quantity_per_unit, p.units_in_stock,
	CASE 
		WHEN p.discontinued = 1 THEN 'y'
		WHEN p.discontinued = 0 THEN 'n'
	END AS discontinued
FROM products p
INNER JOIN categories c ON p.category_id = c.category_id
ORDER BY c.category_name, p.product_name;

9. Kita dimiinta menampilkan seluruh customer dan suplier berdasarkan kota asalnya, disini kita harus menggabungkan 2 query, dan memberikan keterangan mana yang sebagai customer dan supplier.
Jawaban:
SELECT city, company_name, contact_name,
	CASE 
		WHEN customer_id IS NULL THEN 'Suppliers'
		WHEN customer_id IS NOT NULL THEN 'Customers'
	END AS "Relationship"
FROM customers
UNION ALL
SELECT city, company_name, contact_name,
	CASE 
		WHEN supplier_id IS NULL THEN 'Customers'
		WHEN supplier_id IS NOT NULL THEN 'Suppliers'
	END AS "Relationship"
FROM suppliers
ORDER BY city;

10. Kita diminta menampilkan data sale_amount dari setiap employee yang diurutkan berdasarkan negara asal employee tersebut.
Jawaban:
SELECT e.country, e.last_name, e.first_name, o.shipped_date, o.order_id,
	CAST(SUM((d.quantity * d.unit_price)-(d.quantity * d.unit_price * d.discount))
	AS DECIMAL(10,2)) AS "Sale_Amount"
FROM employees e
INNER JOIN orders o ON e.employee_id = o.employee_id
INNER JOIN order_details d ON o.order_id = d.order_id
WHERE EXTRACT(year FROM o.shipped_date) = '1997'
GROUP BY e.country, e.last_name, e.first_name, o.shipped_date, o.order_id
ORDER BY e.country, e.last_name, e.first_name, o.shipped_date;

11. Kita diminta menampilkan data product dan rata rata dari unit_price tiap product.
Jawaban:
SELECT product_name, unit_price
FROM products 
WHERE unit_price > (SELECT AVG(total)
			FROM (SELECT SUM(unit_price) AS total
				FROM products
				GROUP BY product_name) AS average)
ORDER BY unit_price; 

12. Kita diminta mengelompokan semua data product beserta kategorinya berdasarkan kuartal. jumlah penjualan tiap kuartal dari product, kuartal diambil dari shipped_date dari setiap productnya.
Jawaban: 
SELECT c.category_name, p.product_name,
	CAST(SUM((d.quantity * d.unit_price)-(d.quantity * d.unit_price * d.discount))
	AS DECIMAL(12,2)) AS ProductSales,
	concat('Qtr', ' ', EXTRACT(quarter FROM o.shipped_date)) AS ShippedQuarter
FROM products p
JOIN categories c ON p.category_id = c.category_id
JOIN order_details d ON p.product_id = d.product_id
JOIN orders o ON d.order_id = o.order_id
WHERE EXTRACT(year FROM o.shipped_date) = '1997'
GROUP BY ShippedQuarter, c.category_name, p.product_name
ORDER BY c.category_name, p.product_name;

13. Kita diminta menampilkan categorysales dari category utama product pada tahun 1997. category sales didapatkan dari quantity*unit_price - discount.
Jawaban:
SELECT c.category_name,
	CAST(SUM((d.quantity * d.unit_price)-(d.quantity * d.unit_price * d.discount))
	AS DECIMAL(12,2)) AS CategorySales
FROM categories c
INNER JOIN products p ON c.category_id = p.category_id
INNER JOIN order_details d ON p.product_id = d.product_id
INNER JOIN orders o ON o.order_id = d.order_id
WHERE EXTRACT(year FROM o.order_date) = '1997'
GROUP BY c.category_name
ORDER BY c.category_name;

14. Kita diminta menampilkan banyaknya order dari setiap product berdasarkan kuartal yang diambil dari order_date pada tahun 1997. urut dan gabung berdasarkan product_name, company_name, dan order_date. Jika  pada kuartal tersebut tidak ada order product maka tuliskan jumlahnya 0.
Jawaban:
SELECT p.product_name, c.company_name, EXTRACT(year FROM o.order_date) AS OrderYear,
CASE 
	WHEN EXTRACT(quarter FROM o.order_date) = '1' THEN CAST(SUM((d.quantity * d.unit_price)-
		(d.quantity * d.unit_price * d.discount)) AS DECIMAL(10,0))
	ELSE '0'
END AS "Qtr 1",
CASE 
	WHEN EXTRACT(quarter FROM o.order_date) = '2' THEN CAST(SUM((d.quantity * d.unit_price)-
		(d.quantity * d.unit_price * d.discount)) AS DECIMAL(10,0))
	ELSE '0'
END AS "Qtr 2",
CASE 
	WHEN EXTRACT(quarter FROM o.order_date) = '3' THEN CAST(SUM((d.quantity * d.unit_price)-
		(d.quantity * d.unit_price * d.discount)) AS DECIMAL(10,0))
	ELSE '0'
END AS "Qtr 3",
CASE 
	WHEN EXTRACT(quarter FROM o.order_date) = '4' THEN CAST(SUM((d.quantity * d.unit_price)-
		(d.quantity * d.unit_price * d.discount)) AS DECIMAL(10,0))
	ELSE '0'
END AS "Qtr 4"
FROM customers c
INNER JOIN orders o ON o.customer_id = c.customer_id
INNER JOIN order_details d ON d.order_id = o.order_id
INNER JOIN products p ON p.product_id = d.product_id
WHERE EXTRACT(year FROM o.order_date) = '1997'
GROUP BY p.product_name, c.company_name, o.order_date;

15. Kita diminta menampilkan banyaknya unit_in_stock dari setiap kategori berdasarkan dari benua pemasok. keterangan benua diambil dari negara dari pemasok product. urut dan gabung berdasarkan product_category dan benuanya.
Jawaban:
SELECT c.category_name AS product_category,
	CASE 
		WHEN s.country IN ('USA', 'Brazil', 'Canada') THEN 'America'
		WHEN s.country IN ('Australia', 'Japan', 'Singapore') THEN 'Asia Pacific'
		ELSE 'Europe'
	END AS supplier_continent,
	SUM(p.units_in_stock) AS unit_in_stock
FROM categories c
INNER JOIN products p ON c.category_id = p.category_id
INNER JOIN suppliers s ON p.supplier_id = s.supplier_id
GROUP BY c.category_name, supplier_continent
ORDER BY c.category_name;